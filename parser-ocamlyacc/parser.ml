type token =
  | INT of (int)
  | ADD
  | SUB
  | MULT
  | DIV
  | NOT
  | EQUAL
  | NOTEQUAL
  | LOWER
  | GREATER
  | LOWEREQUAL
  | GREATEREQUAL
  | PRINT
  | SEMICOL
  | BEGIN
  | END
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
# 24 "parser.ml"
let yytransl_const = [|
  258 (* ADD *);
  259 (* SUB *);
  260 (* MULT *);
  261 (* DIV *);
  262 (* NOT *);
  263 (* EQUAL *);
  264 (* NOTEQUAL *);
  265 (* LOWER *);
  266 (* GREATER *);
  267 (* LOWEREQUAL *);
  268 (* GREATEREQUAL *);
  269 (* PRINT *);
  270 (* SEMICOL *);
  271 (* BEGIN *);
  272 (* END *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\003\000\004\000\004\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\000\000"

let yylen = "\002\000\
\002\000\002\000\003\000\001\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\002\000\
\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\018\000\000\000\017\000\000\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\013\000\005\000"

let yydgoto = "\002\000\
\005\000\009\000\010\000\011\000"

let yysindex = "\019\000\
\062\255\000\000\067\255\062\255\000\000\036\000\000\000\067\255\
\030\255\029\255\058\255\000\000\055\255\067\255\067\255\067\255\
\067\255\067\255\067\255\067\255\067\255\067\255\067\255\062\255\
\000\000\014\255\040\255\048\255\055\255\072\255\249\254\060\255\
\018\255\066\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\028\000\069\255\000\000\000\000\061\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\027\000\079\000\076\000\069\000\054\000\046\000\031\000\
\016\000\001\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\248\255\085\000\063\000"

let yytablesize = 351
let yytable = "\013\000\
\012\000\020\000\021\000\022\000\023\000\026\000\027\000\028\000\
\029\000\030\000\031\000\032\000\033\000\034\000\035\000\011\000\
\015\000\016\000\017\000\001\000\018\000\019\000\020\000\021\000\
\022\000\023\000\006\000\002\000\022\000\023\000\010\000\014\000\
\015\000\016\000\017\000\012\000\018\000\019\000\020\000\021\000\
\022\000\023\000\024\000\016\000\017\000\015\000\018\000\019\000\
\020\000\021\000\022\000\023\000\017\000\014\000\018\000\019\000\
\020\000\021\000\022\000\023\000\016\000\018\000\019\000\020\000\
\021\000\022\000\023\000\007\000\009\000\021\000\022\000\023\000\
\008\000\025\000\003\000\008\000\004\000\023\000\007\000\019\000\
\020\000\021\000\022\000\023\000\004\000\006\000\036\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\012\000\012\000\012\000\012\000\000\000\012\000\
\012\000\012\000\012\000\012\000\000\000\000\000\012\000\000\000\
\012\000\011\000\011\000\011\000\011\000\000\000\011\000\011\000\
\011\000\011\000\000\000\000\000\006\000\011\000\000\000\011\000\
\010\000\010\000\010\000\010\000\000\000\010\000\010\000\010\000\
\006\000\002\000\006\000\002\000\010\000\000\000\010\000\015\000\
\015\000\015\000\015\000\000\000\015\000\015\000\000\000\014\000\
\014\000\014\000\014\000\015\000\014\000\015\000\016\000\016\000\
\016\000\016\000\000\000\014\000\000\000\014\000\009\000\009\000\
\009\000\009\000\016\000\000\000\016\000\008\000\008\000\008\000\
\007\000\007\000\009\000\000\000\009\000\000\000\000\000\000\000\
\000\000\008\000\000\000\008\000\007\000\000\000\007\000"

let yycheck = "\008\000\
\000\000\009\001\010\001\011\001\012\001\014\000\015\000\016\000\
\017\000\018\000\019\000\020\000\021\000\022\000\023\000\000\000\
\003\001\004\001\005\001\001\000\007\001\008\001\009\001\010\001\
\011\001\012\001\000\000\000\000\011\001\012\001\000\000\002\001\
\003\001\004\001\005\001\000\000\007\001\008\001\009\001\010\001\
\011\001\012\001\014\001\004\001\005\001\000\000\007\001\008\001\
\009\001\010\001\011\001\012\001\005\001\000\000\007\001\008\001\
\009\001\010\001\011\001\012\001\000\000\007\001\008\001\009\001\
\010\001\011\001\012\001\001\001\000\000\010\001\011\001\012\001\
\006\001\016\001\013\001\000\000\015\001\012\001\000\000\008\001\
\009\001\010\001\011\001\012\001\016\001\001\000\024\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\004\001\005\001\255\255\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\014\001\255\255\
\016\001\002\001\003\001\004\001\005\001\255\255\007\001\008\001\
\009\001\010\001\255\255\255\255\002\001\014\001\255\255\016\001\
\002\001\003\001\004\001\005\001\255\255\007\001\008\001\009\001\
\014\001\014\001\016\001\016\001\014\001\255\255\016\001\002\001\
\003\001\004\001\005\001\255\255\007\001\008\001\255\255\002\001\
\003\001\004\001\005\001\014\001\007\001\016\001\002\001\003\001\
\004\001\005\001\255\255\014\001\255\255\016\001\002\001\003\001\
\004\001\005\001\014\001\255\255\016\001\002\001\003\001\004\001\
\002\001\003\001\014\001\255\255\016\001\255\255\255\255\255\255\
\255\255\014\001\255\255\016\001\014\001\255\255\016\001"

let yynames_const = "\
  ADD\000\
  SUB\000\
  MULT\000\
  DIV\000\
  NOT\000\
  EQUAL\000\
  NOTEQUAL\000\
  LOWER\000\
  GREATER\000\
  LOWEREQUAL\000\
  GREATEREQUAL\000\
  PRINT\000\
  SEMICOL\000\
  BEGIN\000\
  END\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.inst) in
    Obj.repr(
# 30 "parser.mly"
                ( _1 )
# 208 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 32 "parser.mly"
                  ( Ast.Print(_2) )
# 215 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'bloc) in
    Obj.repr(
# 33 "parser.mly"
                      ( Ast.Bloc(_2) )
# 222 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.inst) in
    Obj.repr(
# 36 "parser.mly"
            ( [_1] )
# 229 "parser.ml"
               : 'bloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.inst) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bloc) in
    Obj.repr(
# 37 "parser.mly"
                        ( _1::_3 )
# 237 "parser.ml"
               : 'bloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 40 "parser.mly"
                     ( Ast.Add(_1,_3) )
# 245 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 41 "parser.mly"
                     ( Ast.Sub(_1,_3) )
# 253 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 42 "parser.mly"
                      ( Ast.Mult(_1,_3) )
# 261 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 43 "parser.mly"
                     ( Ast.Div(_1,_3) )
# 269 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 44 "parser.mly"
                       ( Ast.Lower(_1,_3) )
# 277 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 45 "parser.mly"
                         ( Ast.Greater(_1,_3) )
# 285 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 46 "parser.mly"
                            ( Ast.LowerEqual(_1,_3) )
# 293 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 47 "parser.mly"
                              ( Ast.GreaterEqual(_1,_3) )
# 301 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 48 "parser.mly"
                       ( Ast.Equal(_1,_3) )
# 309 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 49 "parser.mly"
                          ( Ast.NotEqual(_1,_3) )
# 317 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 50 "parser.mly"
                ( Ast.Not(_2) )
# 324 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 51 "parser.mly"
           ( Ast.Int(_1) )
# 331 "parser.ml"
               : Ast.expr))
(* Entry prog *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let prog (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.inst)
;;
