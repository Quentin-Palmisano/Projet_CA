type token =
  | INT of (int)
  | STRING of (string)
  | ADD
  | SUB
  | MULT
  | DIV
  | NOT
  | EQUAL
  | NOTEQUAL
  | LOWER
  | GREATER
  | LOWEREQUAL
  | GREATEREQUAL
  | PRINT
  | SEMICOL
  | BEGIN
  | END
  | IF
  | THEN
  | ELSE
  | EXCLAM
  | AFFECT
  | REF
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
# 31 "parser.ml"
let yytransl_const = [|
  259 (* ADD *);
  260 (* SUB *);
  261 (* MULT *);
  262 (* DIV *);
  263 (* NOT *);
  264 (* EQUAL *);
  265 (* NOTEQUAL *);
  266 (* LOWER *);
  267 (* GREATER *);
  268 (* LOWEREQUAL *);
  269 (* GREATEREQUAL *);
  270 (* PRINT *);
  271 (* SEMICOL *);
  272 (* BEGIN *);
  273 (* END *);
  274 (* IF *);
  275 (* THEN *);
  276 (* ELSE *);
  277 (* EXCLAM *);
  278 (* AFFECT *);
  279 (* REF *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* STRING *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\003\000\003\000\003\000\004\000\004\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\000\000"

let yylen = "\002\000\
\002\000\002\000\003\000\006\000\003\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\001\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\022\000\000\000\
\000\000\019\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\001\000\000\000\000\000\021\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\015\000\007\000\000\000\000\000\
\004\000"

let yydgoto = "\002\000\
\007\000\014\000\015\000\016\000"

let yysindex = "\006\000\
\000\255\000\000\243\254\029\255\000\255\029\255\000\000\011\000\
\029\255\000\000\029\255\010\255\029\255\080\255\254\254\014\255\
\056\255\000\000\080\255\117\255\000\000\080\255\029\255\029\255\
\029\255\029\255\029\255\029\255\029\255\029\255\029\255\029\255\
\000\255\000\000\000\255\104\255\033\255\089\255\117\255\061\255\
\066\255\045\255\248\254\002\255\000\000\000\000\253\254\000\255\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\033\000\015\255\000\000\
\000\000\000\000\096\000\081\000\000\000\124\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\118\000\111\000\105\000\087\000\063\000\
\055\000\037\000\019\000\001\000\000\000\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\253\255\255\255\002\000"

let yytablesize = 400
let yytable = "\008\000\
\014\000\003\000\017\000\031\000\032\000\019\000\001\000\020\000\
\009\000\022\000\018\000\021\000\033\000\004\000\032\000\005\000\
\048\000\006\000\013\000\036\000\037\000\038\000\039\000\040\000\
\041\000\042\000\043\000\044\000\045\000\010\000\034\000\006\000\
\002\000\047\000\046\000\011\000\012\000\025\000\026\000\000\000\
\027\000\028\000\029\000\030\000\031\000\032\000\049\000\000\000\
\000\000\012\000\000\000\013\000\000\000\000\000\017\000\030\000\
\031\000\032\000\023\000\024\000\025\000\026\000\016\000\027\000\
\028\000\029\000\030\000\031\000\032\000\028\000\029\000\030\000\
\031\000\032\000\035\000\029\000\030\000\031\000\032\000\000\000\
\018\000\000\000\023\000\024\000\025\000\026\000\011\000\027\000\
\028\000\029\000\030\000\031\000\032\000\000\000\026\000\005\000\
\027\000\028\000\029\000\030\000\031\000\032\000\000\000\000\000\
\010\000\000\000\000\000\024\000\025\000\026\000\009\000\027\000\
\028\000\029\000\030\000\031\000\032\000\008\000\000\000\000\000\
\000\000\000\000\000\000\020\000\027\000\028\000\029\000\030\000\
\031\000\032\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\014\000\014\000\014\000\014\000\000\000\
\014\000\014\000\014\000\014\000\014\000\000\000\000\000\014\000\
\000\000\014\000\000\000\014\000\014\000\013\000\013\000\013\000\
\013\000\000\000\013\000\013\000\013\000\013\000\000\000\000\000\
\000\000\013\000\000\000\013\000\000\000\013\000\013\000\012\000\
\012\000\012\000\012\000\000\000\012\000\012\000\012\000\002\000\
\000\000\002\000\000\000\012\000\002\000\012\000\000\000\012\000\
\012\000\017\000\017\000\017\000\017\000\000\000\017\000\017\000\
\000\000\016\000\016\000\016\000\016\000\017\000\016\000\017\000\
\000\000\017\000\017\000\000\000\000\000\016\000\000\000\016\000\
\000\000\016\000\016\000\018\000\018\000\018\000\018\000\000\000\
\000\000\011\000\011\000\011\000\011\000\000\000\000\000\018\000\
\000\000\018\000\000\000\018\000\018\000\011\000\000\000\011\000\
\000\000\011\000\011\000\010\000\010\000\010\000\005\000\000\000\
\005\000\009\000\009\000\005\000\000\000\000\000\000\000\010\000\
\008\000\010\000\000\000\010\000\010\000\009\000\000\000\009\000\
\000\000\009\000\009\000\000\000\008\000\000\000\008\000\000\000\
\008\000\008\000\020\000\000\000\020\000\000\000\020\000\020\000"

let yycheck = "\001\000\
\000\000\002\001\006\000\012\001\013\001\009\000\001\000\011\000\
\022\001\013\000\000\000\002\001\015\001\014\001\013\001\016\001\
\020\001\018\001\000\000\023\000\024\000\025\000\026\000\027\000\
\028\000\029\000\030\000\031\000\032\000\001\001\017\001\017\001\
\000\000\035\000\033\000\007\001\000\000\005\001\006\001\255\255\
\008\001\009\001\010\001\011\001\012\001\013\001\048\000\255\255\
\255\255\021\001\255\255\023\001\255\255\255\255\000\000\011\001\
\012\001\013\001\003\001\004\001\005\001\006\001\000\000\008\001\
\009\001\010\001\011\001\012\001\013\001\009\001\010\001\011\001\
\012\001\013\001\019\001\010\001\011\001\012\001\013\001\255\255\
\000\000\255\255\003\001\004\001\005\001\006\001\000\000\008\001\
\009\001\010\001\011\001\012\001\013\001\255\255\006\001\000\000\
\008\001\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\000\000\255\255\255\255\004\001\005\001\006\001\000\000\008\001\
\009\001\010\001\011\001\012\001\013\001\000\000\255\255\255\255\
\255\255\255\255\255\255\000\000\008\001\009\001\010\001\011\001\
\012\001\013\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\004\001\005\001\006\001\255\255\
\008\001\009\001\010\001\011\001\012\001\255\255\255\255\015\001\
\255\255\017\001\255\255\019\001\020\001\003\001\004\001\005\001\
\006\001\255\255\008\001\009\001\010\001\011\001\255\255\255\255\
\255\255\015\001\255\255\017\001\255\255\019\001\020\001\003\001\
\004\001\005\001\006\001\255\255\008\001\009\001\010\001\015\001\
\255\255\017\001\255\255\015\001\020\001\017\001\255\255\019\001\
\020\001\003\001\004\001\005\001\006\001\255\255\008\001\009\001\
\255\255\003\001\004\001\005\001\006\001\015\001\008\001\017\001\
\255\255\019\001\020\001\255\255\255\255\015\001\255\255\017\001\
\255\255\019\001\020\001\003\001\004\001\005\001\006\001\255\255\
\255\255\003\001\004\001\005\001\006\001\255\255\255\255\015\001\
\255\255\017\001\255\255\019\001\020\001\015\001\255\255\017\001\
\255\255\019\001\020\001\003\001\004\001\005\001\015\001\255\255\
\017\001\003\001\004\001\020\001\255\255\255\255\255\255\015\001\
\003\001\017\001\255\255\019\001\020\001\015\001\255\255\017\001\
\255\255\019\001\020\001\255\255\015\001\255\255\017\001\255\255\
\019\001\020\001\015\001\255\255\017\001\255\255\019\001\020\001"

let yynames_const = "\
  ADD\000\
  SUB\000\
  MULT\000\
  DIV\000\
  NOT\000\
  EQUAL\000\
  NOTEQUAL\000\
  LOWER\000\
  GREATER\000\
  LOWEREQUAL\000\
  GREATEREQUAL\000\
  PRINT\000\
  SEMICOL\000\
  BEGIN\000\
  END\000\
  IF\000\
  THEN\000\
  ELSE\000\
  EXCLAM\000\
  AFFECT\000\
  REF\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  STRING\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.inst) in
    Obj.repr(
# 31 "parser.mly"
                ( _1 )
# 247 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 33 "parser.mly"
                  ( Ast.Print(_2) )
# 254 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'bloc) in
    Obj.repr(
# 34 "parser.mly"
                     ( Ast.Bloc(_2) )
# 261 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Ast.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Ast.inst) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ast.inst) in
    Obj.repr(
# 35 "parser.mly"
                                  ( Ast.If(_2,_4,_6) )
# 270 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 36 "parser.mly"
                         ( Ast.Affect(_1,_3) )
# 278 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.inst) in
    Obj.repr(
# 39 "parser.mly"
            ( [_1] )
# 285 "parser.ml"
               : 'bloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.inst) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bloc) in
    Obj.repr(
# 40 "parser.mly"
                        ( _1::_3 )
# 293 "parser.ml"
               : 'bloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 43 "parser.mly"
                     ( Ast.Add(_1,_3) )
# 301 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 44 "parser.mly"
                     ( Ast.Sub(_1,_3) )
# 309 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 45 "parser.mly"
                      ( Ast.Mult(_1,_3) )
# 317 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 46 "parser.mly"
                     ( Ast.Div(_1,_3) )
# 325 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 47 "parser.mly"
                       ( Ast.Lower(_1,_3) )
# 333 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 48 "parser.mly"
                         ( Ast.Greater(_1,_3) )
# 341 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 49 "parser.mly"
                            ( Ast.LowerEqual(_1,_3) )
# 349 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 50 "parser.mly"
                              ( Ast.GreaterEqual(_1,_3) )
# 357 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 51 "parser.mly"
                       ( Ast.Equal(_1,_3) )
# 365 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 52 "parser.mly"
                          ( Ast.NotEqual(_1,_3) )
# 373 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 53 "parser.mly"
                ( Ast.Not(_2) )
# 380 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 54 "parser.mly"
           ( Ast.Int(_1) )
# 387 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 55 "parser.mly"
                ( Ast.Ref(_2) )
# 394 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 56 "parser.mly"
                     ( Ast.Access(_2) )
# 401 "parser.ml"
               : Ast.expr))
(* Entry prog *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let prog (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.inst)
;;
