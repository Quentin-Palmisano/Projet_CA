# 1 "lexer.mll"
 
  open Parser

# 6 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\233\255\000\000\234\255\235\255\001\000\001\000\003\000\
    \241\255\015\000\000\000\003\000\012\000\013\000\014\000\015\000\
    \002\000\252\255\253\255\029\000\255\255\002\000\251\255\250\255\
    \249\255\246\255\245\255\005\000\002\000\007\000\244\255\005\000\
    \237\255\012\000\006\000\021\000\243\255\020\000\019\000\015\000\
    \240\255\011\000\000\000\239\255\026\000\236\255\238\255\023\000\
    \019\000\014\000\232\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\022\000\255\255\255\255\022\000\022\000\022\000\
    \255\255\013\000\022\000\022\000\008\000\007\000\022\000\022\000\
    \022\000\255\255\255\255\001\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\255\255\000\000\000\000\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\000\000\255\255\
    \000\000\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \000\000\255\255\255\255\000\000\255\255\000\000\000\000\255\255\
    \255\255\255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\004\000\004\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \004\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\018\000\020\000\000\000\019\000\000\000\017\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\000\000\008\000\013\000\015\000\012\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\026\000\025\000\024\000\023\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\033\000\007\000\000\000\043\000\006\000\010\000\046\000\
    \037\000\005\000\031\000\027\000\030\000\041\000\016\000\042\000\
    \002\000\021\000\047\000\032\000\011\000\028\000\022\000\029\000\
    \034\000\035\000\036\000\038\000\039\000\040\000\044\000\045\000\
    \048\000\049\000\050\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\255\255\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\012\000\013\000\014\000\015\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\010\000\000\000\255\255\042\000\000\000\000\000\005\000\
    \007\000\000\000\027\000\011\000\029\000\006\000\000\000\006\000\
    \000\000\016\000\002\000\031\000\000\000\011\000\021\000\028\000\
    \033\000\034\000\035\000\037\000\038\000\039\000\041\000\044\000\
    \047\000\048\000\049\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 9 "lexer.mll"
                  ( ADD )
# 127 "lexer.ml"

  | 1 ->
# 10 "lexer.mll"
                  ( SUB )
# 132 "lexer.ml"

  | 2 ->
# 11 "lexer.mll"
                  ( MULT )
# 137 "lexer.ml"

  | 3 ->
# 12 "lexer.mll"
                  ( DIV )
# 142 "lexer.ml"

  | 4 ->
# 13 "lexer.mll"
                  ( NOT )
# 147 "lexer.ml"

  | 5 ->
# 14 "lexer.mll"
                  ( EQUAL )
# 152 "lexer.ml"

  | 6 ->
# 15 "lexer.mll"
                  ( NOTEQUAL )
# 157 "lexer.ml"

  | 7 ->
# 16 "lexer.mll"
                  ( LOWER )
# 162 "lexer.ml"

  | 8 ->
# 17 "lexer.mll"
                  ( GREATER )
# 167 "lexer.ml"

  | 9 ->
# 18 "lexer.mll"
                  ( LOWEREQUAL )
# 172 "lexer.ml"

  | 10 ->
# 19 "lexer.mll"
                  ( GREATEREQUAL )
# 177 "lexer.ml"

  | 11 ->
# 20 "lexer.mll"
                  ( INT(1) )
# 182 "lexer.ml"

  | 12 ->
# 21 "lexer.mll"
                  ( INT(0) )
# 187 "lexer.ml"

  | 13 ->
let
# 22 "lexer.mll"
               s
# 193 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 22 "lexer.mll"
                  ( INT(int_of_string s) )
# 197 "lexer.ml"

  | 14 ->
# 23 "lexer.mll"
                  ( SEMICOL )
# 202 "lexer.ml"

  | 15 ->
# 24 "lexer.mll"
                  ( BEGIN )
# 207 "lexer.ml"

  | 16 ->
# 25 "lexer.mll"
                  ( END )
# 212 "lexer.ml"

  | 17 ->
# 26 "lexer.mll"
                  ( IF )
# 217 "lexer.ml"

  | 18 ->
# 27 "lexer.mll"
                  ( THEN )
# 222 "lexer.ml"

  | 19 ->
# 28 "lexer.mll"
                  ( ELSE )
# 227 "lexer.ml"

  | 20 ->
# 30 "lexer.mll"
                  ( token lexbuf )
# 232 "lexer.ml"

  | 21 ->
# 31 "lexer.mll"
                  ( EOF )
# 237 "lexer.ml"

  | 22 ->
let
# 32 "lexer.mll"
          lxm
# 243 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 32 "lexer.mll"
                  ( Printf.printf "Unexpected character: %c"  lxm; exit 0 )
# 247 "lexer.ml"

  | 23 ->
# 33 "lexer.mll"
                  ( PRINT )
# 252 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

