type token =
  | INT of (int)
  | STRING of (string)
  | ADD
  | SUB
  | MULT
  | DIV
  | NOT
  | EQUAL
  | NOTEQUAL
  | LOWER
  | GREATER
  | LOWEREQUAL
  | GREATEREQUAL
  | TRUE
  | FALSE
  | PRINT
  | SEMICOL
  | BEGIN
  | END
  | IF
  | THEN
  | ELSE
  | WHILE
  | DO
  | DONE
  | LET
  | IN
  | ASSIGN
  | EXCLAM
  | AFFECT
  | REF
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
# 39 "parser.ml"
let yytransl_const = [|
  259 (* ADD *);
  260 (* SUB *);
  261 (* MULT *);
  262 (* DIV *);
  263 (* NOT *);
  264 (* EQUAL *);
  265 (* NOTEQUAL *);
  266 (* LOWER *);
  267 (* GREATER *);
  268 (* LOWEREQUAL *);
  269 (* GREATEREQUAL *);
  270 (* TRUE *);
  271 (* FALSE *);
  272 (* PRINT *);
  273 (* SEMICOL *);
  274 (* BEGIN *);
  275 (* END *);
  276 (* IF *);
  277 (* THEN *);
  278 (* ELSE *);
  279 (* WHILE *);
  280 (* DO *);
  281 (* DONE *);
  282 (* LET *);
  283 (* IN *);
  284 (* ASSIGN *);
  285 (* EXCLAM *);
  286 (* AFFECT *);
  287 (* REF *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* STRING *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\003\000\003\000\003\000\003\000\004\000\004\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\000\000"

let yylen = "\002\000\
\002\000\002\000\003\000\006\000\006\000\005\000\001\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\002\000\001\000\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\
\000\000\020\000\023\000\000\000\021\000\022\000\000\000\000\000\
\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\016\000\008\000\
\000\000\000\000\000\000\000\000\006\000\000\000\004\000\005\000"

let yydgoto = "\002\000\
\008\000\015\000\016\000\017\000"

let yysindex = "\006\000\
\253\254\000\000\004\255\253\254\004\255\004\255\010\255\000\000\
\024\000\000\000\000\000\004\255\000\000\000\000\117\255\008\255\
\018\255\103\255\075\255\024\255\000\000\061\255\004\255\004\255\
\004\255\004\255\004\255\004\255\004\255\004\255\004\255\004\255\
\253\254\000\000\253\254\253\254\004\255\085\255\034\255\128\255\
\061\255\136\255\092\255\037\255\009\255\040\255\000\000\000\000\
\032\255\031\255\055\255\253\254\000\000\253\254\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\002\000\245\254\
\000\000\000\000\000\000\000\000\000\000\110\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\178\000\169\000\144\000\
\135\000\101\000\076\000\051\000\026\000\001\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\004\000\003\000\223\255"

let yytablesize = 461
let yytable = "\048\000\
\015\000\002\000\050\000\009\000\010\000\011\000\001\000\007\000\
\018\000\019\000\012\000\020\000\003\000\007\000\004\000\022\000\
\005\000\013\000\014\000\006\000\031\000\032\000\007\000\021\000\
\033\000\014\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\047\000\034\000\049\000\025\000\026\000\
\051\000\027\000\028\000\029\000\030\000\031\000\032\000\030\000\
\031\000\032\000\013\000\037\000\032\000\052\000\055\000\053\000\
\056\000\023\000\024\000\025\000\026\000\000\000\027\000\028\000\
\029\000\030\000\031\000\032\000\027\000\028\000\029\000\030\000\
\031\000\032\000\000\000\018\000\000\000\023\000\024\000\025\000\
\026\000\054\000\027\000\028\000\029\000\030\000\031\000\032\000\
\024\000\025\000\026\000\000\000\027\000\028\000\029\000\030\000\
\031\000\032\000\036\000\000\000\017\000\029\000\030\000\031\000\
\032\000\023\000\024\000\025\000\026\000\019\000\027\000\028\000\
\029\000\030\000\031\000\032\000\000\000\000\000\000\000\023\000\
\024\000\025\000\026\000\035\000\027\000\028\000\029\000\030\000\
\031\000\032\000\000\000\000\000\000\000\026\000\012\000\027\000\
\028\000\029\000\030\000\031\000\032\000\000\000\000\000\011\000\
\028\000\029\000\030\000\031\000\032\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\009\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\015\000\015\000\015\000\015\000\000\000\
\015\000\015\000\015\000\015\000\015\000\000\000\000\000\000\000\
\000\000\015\000\002\000\015\000\002\000\015\000\015\000\002\000\
\015\000\015\000\002\000\015\000\014\000\014\000\014\000\014\000\
\000\000\014\000\014\000\014\000\014\000\000\000\000\000\000\000\
\000\000\000\000\014\000\000\000\014\000\000\000\014\000\014\000\
\000\000\014\000\014\000\000\000\014\000\013\000\013\000\013\000\
\013\000\000\000\013\000\013\000\013\000\000\000\000\000\000\000\
\000\000\000\000\000\000\013\000\000\000\013\000\000\000\013\000\
\013\000\000\000\013\000\013\000\000\000\013\000\018\000\018\000\
\018\000\018\000\000\000\018\000\018\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\018\000\000\000\018\000\000\000\
\018\000\018\000\000\000\018\000\018\000\000\000\018\000\017\000\
\017\000\017\000\017\000\000\000\017\000\000\000\000\000\000\000\
\019\000\019\000\019\000\019\000\000\000\017\000\000\000\017\000\
\000\000\017\000\017\000\000\000\017\000\017\000\019\000\017\000\
\019\000\000\000\019\000\019\000\000\000\019\000\019\000\000\000\
\019\000\012\000\012\000\012\000\012\000\000\000\000\000\000\000\
\000\000\000\000\011\000\011\000\011\000\000\000\000\000\012\000\
\000\000\012\000\000\000\012\000\012\000\000\000\012\000\012\000\
\011\000\012\000\011\000\000\000\011\000\011\000\000\000\011\000\
\011\000\000\000\011\000\010\000\010\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\009\000\000\000\000\000\000\000\
\000\000\010\000\000\000\010\000\000\000\010\000\010\000\000\000\
\010\000\010\000\009\000\010\000\009\000\000\000\009\000\009\000\
\000\000\009\000\009\000\000\000\009\000"

let yycheck = "\033\000\
\000\000\000\000\036\000\001\000\001\001\002\001\001\000\019\001\
\005\000\006\000\007\001\002\001\016\001\025\001\018\001\012\000\
\020\001\014\001\015\001\023\001\012\001\013\001\026\001\000\000\
\017\001\000\000\023\000\024\000\025\000\026\000\027\000\028\000\
\029\000\030\000\031\000\032\000\019\001\035\000\005\001\006\001\
\037\000\008\001\009\001\010\001\011\001\012\001\013\001\011\001\
\012\001\013\001\000\000\028\001\013\001\022\001\052\000\025\001\
\054\000\003\001\004\001\005\001\006\001\255\255\008\001\009\001\
\010\001\011\001\012\001\013\001\008\001\009\001\010\001\011\001\
\012\001\013\001\255\255\000\000\255\255\003\001\004\001\005\001\
\006\001\027\001\008\001\009\001\010\001\011\001\012\001\013\001\
\004\001\005\001\006\001\255\255\008\001\009\001\010\001\011\001\
\012\001\013\001\024\001\255\255\000\000\010\001\011\001\012\001\
\013\001\003\001\004\001\005\001\006\001\000\000\008\001\009\001\
\010\001\011\001\012\001\013\001\255\255\255\255\255\255\003\001\
\004\001\005\001\006\001\021\001\008\001\009\001\010\001\011\001\
\012\001\013\001\255\255\255\255\255\255\006\001\000\000\008\001\
\009\001\010\001\011\001\012\001\013\001\255\255\255\255\000\000\
\009\001\010\001\011\001\012\001\013\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\004\001\005\001\006\001\255\255\
\008\001\009\001\010\001\011\001\012\001\255\255\255\255\255\255\
\255\255\017\001\017\001\019\001\019\001\021\001\022\001\022\001\
\024\001\025\001\025\001\027\001\003\001\004\001\005\001\006\001\
\255\255\008\001\009\001\010\001\011\001\255\255\255\255\255\255\
\255\255\255\255\017\001\255\255\019\001\255\255\021\001\022\001\
\255\255\024\001\025\001\255\255\027\001\003\001\004\001\005\001\
\006\001\255\255\008\001\009\001\010\001\255\255\255\255\255\255\
\255\255\255\255\255\255\017\001\255\255\019\001\255\255\021\001\
\022\001\255\255\024\001\025\001\255\255\027\001\003\001\004\001\
\005\001\006\001\255\255\008\001\009\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\017\001\255\255\019\001\255\255\
\021\001\022\001\255\255\024\001\025\001\255\255\027\001\003\001\
\004\001\005\001\006\001\255\255\008\001\255\255\255\255\255\255\
\003\001\004\001\005\001\006\001\255\255\017\001\255\255\019\001\
\255\255\021\001\022\001\255\255\024\001\025\001\017\001\027\001\
\019\001\255\255\021\001\022\001\255\255\024\001\025\001\255\255\
\027\001\003\001\004\001\005\001\006\001\255\255\255\255\255\255\
\255\255\255\255\003\001\004\001\005\001\255\255\255\255\017\001\
\255\255\019\001\255\255\021\001\022\001\255\255\024\001\025\001\
\017\001\027\001\019\001\255\255\021\001\022\001\255\255\024\001\
\025\001\255\255\027\001\003\001\004\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\003\001\255\255\255\255\255\255\
\255\255\017\001\255\255\019\001\255\255\021\001\022\001\255\255\
\024\001\025\001\017\001\027\001\019\001\255\255\021\001\022\001\
\255\255\024\001\025\001\255\255\027\001"

let yynames_const = "\
  ADD\000\
  SUB\000\
  MULT\000\
  DIV\000\
  NOT\000\
  EQUAL\000\
  NOTEQUAL\000\
  LOWER\000\
  GREATER\000\
  LOWEREQUAL\000\
  GREATEREQUAL\000\
  TRUE\000\
  FALSE\000\
  PRINT\000\
  SEMICOL\000\
  BEGIN\000\
  END\000\
  IF\000\
  THEN\000\
  ELSE\000\
  WHILE\000\
  DO\000\
  DONE\000\
  LET\000\
  IN\000\
  ASSIGN\000\
  EXCLAM\000\
  AFFECT\000\
  REF\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  STRING\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.inst) in
    Obj.repr(
# 33 "parser.mly"
                ( _1 )
# 287 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 35 "parser.mly"
                  ( Ast.Print(_2) )
# 294 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'bloc) in
    Obj.repr(
# 36 "parser.mly"
                     ( Ast.Bloc(_2) )
# 301 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Ast.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Ast.inst) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ast.inst) in
    Obj.repr(
# 37 "parser.mly"
                                  ( Ast.If(_2,_4,_6) )
# 310 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ast.inst) in
    Obj.repr(
# 38 "parser.mly"
                                     ( Ast.Let(_2,_4,_6) )
# 319 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Ast.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'bloc) in
    Obj.repr(
# 39 "parser.mly"
                              ( Ast.While(_2,_4) )
# 327 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.inst) in
    Obj.repr(
# 43 "parser.mly"
            ( [_1] )
# 334 "parser.ml"
               : 'bloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.inst) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bloc) in
    Obj.repr(
# 44 "parser.mly"
                        ( _1::_3 )
# 342 "parser.ml"
               : 'bloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 47 "parser.mly"
                     ( Ast.Add(_1,_3) )
# 350 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 48 "parser.mly"
                     ( Ast.Sub(_1,_3) )
# 358 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 49 "parser.mly"
                      ( Ast.Mult(_1,_3) )
# 366 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 50 "parser.mly"
                     ( Ast.Div(_1,_3) )
# 374 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 51 "parser.mly"
                       ( Ast.Lower(_1,_3) )
# 382 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 52 "parser.mly"
                         ( Ast.Greater(_1,_3) )
# 390 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 53 "parser.mly"
                            ( Ast.LowerEqual(_1,_3) )
# 398 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 54 "parser.mly"
                              ( Ast.GreaterEqual(_1,_3) )
# 406 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 55 "parser.mly"
                       ( Ast.Equal(_1,_3) )
# 414 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 56 "parser.mly"
                          ( Ast.NotEqual(_1,_3) )
# 422 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 57 "parser.mly"
                ( Ast.Not(_2) )
# 429 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 58 "parser.mly"
           ( Ast.Int(_1) )
# 436 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
            ( Ast.True )
# 442 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
             ( Ast.False )
# 448 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 61 "parser.mly"
              ( Ast.String(_1) )
# 455 "parser.ml"
               : Ast.expr))
(* Entry prog *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let prog (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.inst)
;;
