type token =
  | INT of (int)
  | STRING of (string)
  | LP
  | RP
  | ADD
  | SUB
  | MULT
  | DIV
  | NOT
  | EQUAL
  | NOTEQUAL
  | LOWER
  | GREATER
  | LOWEREQUAL
  | GREATEREQUAL
  | TRUE
  | FALSE
  | PRINT
  | SEMICOL
  | BEGIN
  | END
  | IF
  | THEN
  | ELSE
  | WHILE
  | DO
  | DONE
  | LET
  | IN
  | ASSIGN
  | EXCLAM
  | AFFECT
  | REF
  | AND
  | WHERE
  | LA
  | RA
  | LC
  | RC
  | COMMA
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
# 48 "parser.ml"
let yytransl_const = [|
  259 (* LP *);
  260 (* RP *);
  261 (* ADD *);
  262 (* SUB *);
  263 (* MULT *);
  264 (* DIV *);
  265 (* NOT *);
  266 (* EQUAL *);
  267 (* NOTEQUAL *);
  268 (* LOWER *);
  269 (* GREATER *);
  270 (* LOWEREQUAL *);
  271 (* GREATEREQUAL *);
  272 (* TRUE *);
  273 (* FALSE *);
  274 (* PRINT *);
  275 (* SEMICOL *);
  276 (* BEGIN *);
  277 (* END *);
  278 (* IF *);
  279 (* THEN *);
  280 (* ELSE *);
  281 (* WHILE *);
  282 (* DO *);
  283 (* DONE *);
  284 (* LET *);
  285 (* IN *);
  286 (* ASSIGN *);
  287 (* EXCLAM *);
  288 (* AFFECT *);
  289 (* REF *);
  290 (* AND *);
  291 (* WHERE *);
  292 (* LA *);
  293 (* RA *);
  294 (* LC *);
  295 (* RC *);
  296 (* COMMA *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* STRING *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\004\000\004\000\005\000\005\000\006\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\007\000\007\000\000\000"

let yylen = "\002\000\
\002\000\002\000\003\000\006\000\004\000\004\000\005\000\003\000\
\003\000\001\000\003\000\001\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\001\000\001\000\001\000\001\000\002\000\002\000\
\003\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\036\000\000\000\000\000\027\000\030\000\000\000\000\000\028\000\
\029\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\
\026\000\032\000\031\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\003\000\000\000\000\000\000\000\000\000\000\000\009\000\015\000\
\000\000\033\000\000\000\000\000\000\000\019\000\000\000\000\000\
\000\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\
\000\000\013\000\035\000\000\000\007\000\000\000"

let yydgoto = "\002\000\
\009\000\036\000\022\000\023\000\027\000\028\000\037\000"

let yysindex = "\007\000\
\069\255\000\000\234\254\015\255\069\255\015\255\015\255\010\255\
\000\000\004\000\015\255\000\000\000\000\015\255\015\255\000\000\
\000\000\013\255\015\255\015\255\144\255\244\254\255\254\119\255\
\102\255\251\254\004\255\011\255\010\255\000\000\144\255\133\255\
\000\000\000\000\000\000\071\255\007\255\015\255\015\255\015\255\
\015\255\015\255\015\255\015\255\015\255\015\255\015\255\069\255\
\000\000\069\255\069\255\015\255\069\255\010\255\000\000\000\000\
\015\255\000\000\029\255\020\255\039\255\000\000\158\255\169\255\
\180\255\184\255\035\255\058\255\000\000\235\254\041\255\144\255\
\034\255\000\000\000\000\069\255\000\000\034\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\002\000\240\254\000\000\000\000\
\000\000\000\000\000\000\045\255\000\000\000\000\039\000\000\000\
\000\000\000\000\000\000\033\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\072\000\038\000\001\000\000\000\254\000\228\000\
\200\000\168\000\136\000\104\000\000\000\013\000\000\000\010\001\
\073\000\000\000\000\000\000\000\000\000\105\000"

let yygindex = "\000\000\
\000\000\015\000\255\255\214\255\026\000\059\000\033\000"

let yytablesize = 557
let yytable = "\010\000\
\018\000\002\000\076\000\030\000\010\000\069\000\048\000\001\000\
\071\000\011\000\010\000\026\000\005\000\029\000\034\000\012\000\
\013\000\014\000\021\000\049\000\024\000\025\000\029\000\015\000\
\052\000\031\000\040\000\041\000\032\000\033\000\016\000\017\000\
\053\000\035\000\039\000\040\000\041\000\017\000\008\000\038\000\
\039\000\040\000\041\000\058\000\054\000\018\000\041\000\019\000\
\070\000\047\000\020\000\073\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\038\000\039\000\
\040\000\041\000\072\000\077\000\029\000\034\000\003\000\016\000\
\006\000\012\000\078\000\038\000\039\000\040\000\041\000\074\000\
\042\000\043\000\044\000\045\000\046\000\047\000\004\000\055\000\
\005\000\075\000\006\000\000\000\000\000\007\000\000\000\000\000\
\008\000\000\000\000\000\000\000\000\000\000\000\000\000\023\000\
\004\000\000\000\038\000\039\000\040\000\041\000\057\000\042\000\
\043\000\044\000\045\000\046\000\047\000\000\000\000\000\000\000\
\000\000\000\000\000\000\038\000\039\000\040\000\041\000\051\000\
\042\000\043\000\044\000\045\000\046\000\047\000\000\000\022\000\
\056\000\038\000\039\000\040\000\041\000\050\000\042\000\043\000\
\044\000\045\000\046\000\047\000\038\000\039\000\040\000\041\000\
\000\000\042\000\043\000\044\000\045\000\046\000\047\000\000\000\
\000\000\000\000\038\000\039\000\040\000\041\000\000\000\021\000\
\043\000\044\000\045\000\046\000\047\000\038\000\039\000\040\000\
\041\000\000\000\000\000\000\000\044\000\045\000\046\000\047\000\
\038\000\039\000\040\000\041\000\038\000\039\000\040\000\041\000\
\045\000\046\000\047\000\000\000\000\000\046\000\047\000\020\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\025\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\024\000\000\000\000\000\
\000\000\000\000\000\000\000\000\018\000\018\000\018\000\018\000\
\000\000\014\000\018\000\018\000\018\000\018\000\018\000\018\000\
\000\000\000\000\000\000\018\000\002\000\018\000\002\000\018\000\
\018\000\002\000\018\000\018\000\002\000\018\000\000\000\005\000\
\000\000\005\000\018\000\018\000\002\000\018\000\029\000\005\000\
\018\000\017\000\017\000\017\000\000\000\000\000\000\000\017\000\
\017\000\017\000\017\000\017\000\017\000\000\000\000\000\000\000\
\017\000\008\000\017\000\008\000\017\000\017\000\008\000\017\000\
\017\000\008\000\017\000\000\000\000\000\000\000\000\000\017\000\
\017\000\008\000\017\000\016\000\016\000\017\000\000\000\000\000\
\000\000\016\000\016\000\016\000\016\000\016\000\016\000\000\000\
\000\000\000\000\016\000\006\000\016\000\006\000\016\000\016\000\
\006\000\016\000\016\000\006\000\016\000\000\000\000\000\000\000\
\000\000\016\000\016\000\023\000\016\000\000\000\000\000\016\000\
\000\000\023\000\023\000\023\000\023\000\023\000\023\000\000\000\
\000\000\000\000\023\000\004\000\023\000\004\000\023\000\023\000\
\004\000\023\000\023\000\004\000\023\000\000\000\000\000\000\000\
\000\000\023\000\023\000\022\000\023\000\000\000\000\000\023\000\
\000\000\022\000\022\000\022\000\022\000\022\000\000\000\000\000\
\000\000\000\000\022\000\000\000\022\000\000\000\022\000\022\000\
\000\000\022\000\022\000\000\000\022\000\000\000\000\000\000\000\
\000\000\022\000\022\000\021\000\022\000\000\000\000\000\022\000\
\000\000\021\000\021\000\021\000\021\000\000\000\000\000\000\000\
\000\000\000\000\021\000\000\000\021\000\000\000\021\000\021\000\
\000\000\021\000\021\000\000\000\021\000\000\000\000\000\000\000\
\000\000\021\000\021\000\020\000\021\000\000\000\000\000\021\000\
\000\000\020\000\020\000\020\000\000\000\000\000\000\000\000\000\
\000\000\000\000\020\000\000\000\020\000\000\000\020\000\020\000\
\000\000\020\000\020\000\000\000\020\000\000\000\000\000\025\000\
\000\000\020\000\020\000\000\000\020\000\025\000\025\000\020\000\
\000\000\000\000\000\000\000\000\000\000\000\000\025\000\000\000\
\025\000\000\000\025\000\025\000\000\000\025\000\025\000\000\000\
\025\000\024\000\000\000\000\000\000\000\025\000\025\000\024\000\
\025\000\000\000\000\000\025\000\000\000\000\000\000\000\000\000\
\024\000\000\000\024\000\000\000\024\000\024\000\000\000\024\000\
\024\000\000\000\024\000\000\000\014\000\000\000\014\000\024\000\
\024\000\014\000\024\000\000\000\014\000\024\000\014\000\000\000\
\000\000\000\000\000\000\014\000\014\000"

let yycheck = "\001\000\
\000\000\000\000\024\001\000\000\021\001\048\000\019\001\001\000\
\051\000\032\001\027\001\002\001\000\000\035\001\002\001\001\001\
\002\001\003\001\004\000\021\001\006\000\007\000\035\001\009\001\
\030\001\011\000\007\001\008\001\014\000\015\000\016\001\017\001\
\029\001\019\000\006\001\007\001\008\001\000\000\000\000\005\001\
\006\001\007\001\008\001\037\001\034\001\031\001\008\001\033\001\
\050\000\015\001\036\001\053\000\038\000\039\000\040\000\041\000\
\042\000\043\000\044\000\045\000\046\000\047\000\005\001\006\001\
\007\001\008\001\052\000\027\001\035\001\037\001\002\001\000\000\
\000\000\029\001\076\000\005\001\006\001\007\001\008\001\054\000\
\010\001\011\001\012\001\013\001\014\001\015\001\018\001\029\000\
\020\001\057\000\022\001\255\255\255\255\025\001\255\255\255\255\
\028\001\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\000\000\255\255\005\001\006\001\007\001\008\001\040\001\010\001\
\011\001\012\001\013\001\014\001\015\001\255\255\255\255\255\255\
\255\255\255\255\255\255\005\001\006\001\007\001\008\001\026\001\
\010\001\011\001\012\001\013\001\014\001\015\001\255\255\000\000\
\004\001\005\001\006\001\007\001\008\001\023\001\010\001\011\001\
\012\001\013\001\014\001\015\001\005\001\006\001\007\001\008\001\
\255\255\010\001\011\001\012\001\013\001\014\001\015\001\255\255\
\255\255\255\255\005\001\006\001\007\001\008\001\255\255\000\000\
\011\001\012\001\013\001\014\001\015\001\005\001\006\001\007\001\
\008\001\255\255\255\255\255\255\012\001\013\001\014\001\015\001\
\005\001\006\001\007\001\008\001\005\001\006\001\007\001\008\001\
\013\001\014\001\015\001\255\255\255\255\014\001\015\001\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\004\001\005\001\006\001\007\001\
\255\255\000\000\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\255\255\255\255\019\001\019\001\021\001\021\001\023\001\
\024\001\024\001\026\001\027\001\027\001\029\001\255\255\019\001\
\255\255\021\001\034\001\035\001\035\001\037\001\035\001\027\001\
\040\001\004\001\005\001\006\001\255\255\255\255\255\255\010\001\
\011\001\012\001\013\001\014\001\015\001\255\255\255\255\255\255\
\019\001\019\001\021\001\021\001\023\001\024\001\024\001\026\001\
\027\001\027\001\029\001\255\255\255\255\255\255\255\255\034\001\
\035\001\035\001\037\001\004\001\005\001\040\001\255\255\255\255\
\255\255\010\001\011\001\012\001\013\001\014\001\015\001\255\255\
\255\255\255\255\019\001\019\001\021\001\021\001\023\001\024\001\
\024\001\026\001\027\001\027\001\029\001\255\255\255\255\255\255\
\255\255\034\001\035\001\004\001\037\001\255\255\255\255\040\001\
\255\255\010\001\011\001\012\001\013\001\014\001\015\001\255\255\
\255\255\255\255\019\001\019\001\021\001\021\001\023\001\024\001\
\024\001\026\001\027\001\027\001\029\001\255\255\255\255\255\255\
\255\255\034\001\035\001\004\001\037\001\255\255\255\255\040\001\
\255\255\010\001\011\001\012\001\013\001\014\001\255\255\255\255\
\255\255\255\255\019\001\255\255\021\001\255\255\023\001\024\001\
\255\255\026\001\027\001\255\255\029\001\255\255\255\255\255\255\
\255\255\034\001\035\001\004\001\037\001\255\255\255\255\040\001\
\255\255\010\001\011\001\012\001\013\001\255\255\255\255\255\255\
\255\255\255\255\019\001\255\255\021\001\255\255\023\001\024\001\
\255\255\026\001\027\001\255\255\029\001\255\255\255\255\255\255\
\255\255\034\001\035\001\004\001\037\001\255\255\255\255\040\001\
\255\255\010\001\011\001\012\001\255\255\255\255\255\255\255\255\
\255\255\255\255\019\001\255\255\021\001\255\255\023\001\024\001\
\255\255\026\001\027\001\255\255\029\001\255\255\255\255\004\001\
\255\255\034\001\035\001\255\255\037\001\010\001\011\001\040\001\
\255\255\255\255\255\255\255\255\255\255\255\255\019\001\255\255\
\021\001\255\255\023\001\024\001\255\255\026\001\027\001\255\255\
\029\001\004\001\255\255\255\255\255\255\034\001\035\001\010\001\
\037\001\255\255\255\255\040\001\255\255\255\255\255\255\255\255\
\019\001\255\255\021\001\255\255\023\001\024\001\255\255\026\001\
\027\001\255\255\029\001\255\255\019\001\255\255\021\001\034\001\
\035\001\024\001\037\001\255\255\027\001\040\001\029\001\255\255\
\255\255\255\255\255\255\034\001\035\001"

let yynames_const = "\
  LP\000\
  RP\000\
  ADD\000\
  SUB\000\
  MULT\000\
  DIV\000\
  NOT\000\
  EQUAL\000\
  NOTEQUAL\000\
  LOWER\000\
  GREATER\000\
  LOWEREQUAL\000\
  GREATEREQUAL\000\
  TRUE\000\
  FALSE\000\
  PRINT\000\
  SEMICOL\000\
  BEGIN\000\
  END\000\
  IF\000\
  THEN\000\
  ELSE\000\
  WHILE\000\
  DO\000\
  DONE\000\
  LET\000\
  IN\000\
  ASSIGN\000\
  EXCLAM\000\
  AFFECT\000\
  REF\000\
  AND\000\
  WHERE\000\
  LA\000\
  RA\000\
  LC\000\
  RC\000\
  COMMA\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  STRING\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.inst) in
    Obj.repr(
# 42 "parser.mly"
                ( _1 )
# 351 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 44 "parser.mly"
                  ( Ast.Print(_2) )
# 358 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'bloc) in
    Obj.repr(
# 45 "parser.mly"
                     ( Ast.Bloc(_2) )
# 365 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Ast.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Ast.inst) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ast.inst) in
    Obj.repr(
# 46 "parser.mly"
                                  ( Ast.If(_2,_4,_6) )
# 374 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Ast.inst) in
    Obj.repr(
# 47 "parser.mly"
                        ( Ast.IfThen(_2,_4) )
# 382 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'et) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Ast.inst) in
    Obj.repr(
# 48 "parser.mly"
                    ( Ast.LetAnd(_2,_4) )
# 390 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Ast.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'bloc) in
    Obj.repr(
# 49 "parser.mly"
                              ( Ast.While(_2,_4) )
# 398 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 50 "parser.mly"
                         ( Ast.Affect (_1,_3) )
# 406 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.inst) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'blablou) in
    Obj.repr(
# 51 "parser.mly"
                         ( Ast.Where(_1,_3) )
# 414 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.inst) in
    Obj.repr(
# 54 "parser.mly"
            ( [_1] )
# 421 "parser.ml"
               : 'bloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.inst) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bloc) in
    Obj.repr(
# 55 "parser.mly"
                        ( _1::_3 )
# 429 "parser.ml"
               : 'bloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'blablou) in
    Obj.repr(
# 58 "parser.mly"
             ( [_1] )
# 436 "parser.ml"
               : 'et))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'blablou) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'et) in
    Obj.repr(
# 59 "parser.mly"
                     ( _1::_3 )
# 444 "parser.ml"
               : 'et))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 61 "parser.mly"
                             ( (_1,_3) )
# 452 "parser.ml"
               : 'blablou))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.expr) in
    Obj.repr(
# 63 "parser.mly"
                  ( Ast.Par(_2) )
# 459 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 64 "parser.mly"
                     ( Ast.Add(_1,_3) )
# 467 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 65 "parser.mly"
                     ( Ast.Sub(_1,_3) )
# 475 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 66 "parser.mly"
                      ( Ast.Mult(_1,_3) )
# 483 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 67 "parser.mly"
                     ( Ast.Div(_1,_3) )
# 491 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 68 "parser.mly"
                       ( Ast.Lower(_1,_3) )
# 499 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 69 "parser.mly"
                         ( Ast.Greater(_1,_3) )
# 507 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 70 "parser.mly"
                            ( Ast.LowerEqual(_1,_3) )
# 515 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 71 "parser.mly"
                              ( Ast.GreaterEqual(_1,_3) )
# 523 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 72 "parser.mly"
                       ( Ast.Equal(_1,_3) )
# 531 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 73 "parser.mly"
                          ( Ast.NotEqual(_1,_3) )
# 539 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 74 "parser.mly"
                ( Ast.Not(_2) )
# 546 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 75 "parser.mly"
           ( Ast.Int(_1) )
# 553 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "parser.mly"
            ( Ast.True )
# 559 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "parser.mly"
             ( Ast.False )
# 565 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 78 "parser.mly"
              ( Ast.String(_1) )
# 572 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 79 "parser.mly"
                ( Ast.Ref(_2) )
# 579 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 80 "parser.mly"
                     ( Ast.Exclam(_2) )
# 586 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'seq) in
    Obj.repr(
# 81 "parser.mly"
                 ( Ast.Tab(_2) )
# 593 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 84 "parser.mly"
           ( [_1] )
# 600 "parser.ml"
               : 'seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'seq) in
    Obj.repr(
# 85 "parser.mly"
                     ( _1::_3 )
# 608 "parser.ml"
               : 'seq))
(* Entry prog *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let prog (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.inst)
;;
