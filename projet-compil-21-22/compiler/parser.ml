type token =
  | LP
  | RP
  | INT of (int)
  | STRING of (string)
  | ADD
  | SUB
  | MULT
  | DIV
  | NOT
  | EQUAL
  | NOTEQUAL
  | LOWER
  | GREATER
  | LOWEREQUAL
  | GREATEREQUAL
  | TRUE
  | FALSE
  | PRINT
  | SEMICOL
  | BEGIN
  | END
  | IF
  | THEN
  | ELSE
  | WHILE
  | DO
  | DONE
  | LET
  | IN
  | ASSIGN
  | EXCLAM
  | AFFECT
  | REF
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
# 41 "parser.ml"
let yytransl_const = [|
  257 (* LP *);
  258 (* RP *);
  261 (* ADD *);
  262 (* SUB *);
  263 (* MULT *);
  264 (* DIV *);
  265 (* NOT *);
  266 (* EQUAL *);
  267 (* NOTEQUAL *);
  268 (* LOWER *);
  269 (* GREATER *);
  270 (* LOWEREQUAL *);
  271 (* GREATEREQUAL *);
  272 (* TRUE *);
  273 (* FALSE *);
  274 (* PRINT *);
  275 (* SEMICOL *);
  276 (* BEGIN *);
  277 (* END *);
  278 (* IF *);
  279 (* THEN *);
  280 (* ELSE *);
  281 (* WHILE *);
  282 (* DO *);
  283 (* DONE *);
  284 (* LET *);
  285 (* IN *);
  286 (* ASSIGN *);
  287 (* EXCLAM *);
  288 (* AFFECT *);
  289 (* REF *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  259 (* INT *);
  260 (* STRING *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\004\000\004\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\000\000"

let yylen = "\002\000\
\002\000\002\000\003\000\006\000\004\000\006\000\005\000\003\000\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\002\000\001\000\001\000\
\001\000\001\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\029\000\000\000\000\000\000\000\023\000\026\000\000\000\024\000\
\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\001\000\000\000\000\000\000\000\028\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\003\000\000\000\000\000\000\000\011\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\019\000\010\000\000\000\000\000\000\000\000\000\007\000\000\000\
\004\000\006\000"

let yydgoto = "\002\000\
\009\000\020\000\021\000\022\000"

let yysindex = "\004\000\
\073\255\000\000\009\255\043\255\073\255\043\255\043\255\041\255\
\000\000\050\000\043\255\043\255\000\000\000\000\043\255\000\000\
\000\000\047\255\043\255\159\255\035\255\036\255\122\255\105\255\
\026\255\000\000\159\255\145\255\111\255\000\000\159\255\043\255\
\043\255\043\255\043\255\043\255\043\255\043\255\043\255\043\255\
\043\255\073\255\000\000\073\255\073\255\043\255\000\000\006\255\
\175\255\054\255\111\255\165\255\011\255\025\255\034\255\040\255\
\000\000\000\000\046\255\031\255\075\255\073\255\000\000\073\255\
\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\072\000\239\254\000\000\000\000\000\000\
\000\000\000\000\163\000\000\000\114\000\000\000\193\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\184\000\
\175\000\149\000\140\000\105\000\079\000\053\000\027\000\001\000\
\000\000\000\000\022\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\252\255\255\255\220\255"

let yytablesize = 478
let yytable = "\010\000\
\018\000\023\000\024\000\009\000\001\000\058\000\027\000\028\000\
\060\000\009\000\029\000\033\000\034\000\035\000\031\000\036\000\
\037\000\038\000\039\000\040\000\041\000\005\000\038\000\039\000\
\040\000\041\000\017\000\048\000\049\000\050\000\051\000\052\000\
\053\000\054\000\055\000\056\000\057\000\039\000\040\000\041\000\
\011\000\061\000\059\000\012\000\025\000\013\000\014\000\040\000\
\041\000\026\000\030\000\015\000\016\000\042\000\041\000\046\000\
\043\000\063\000\016\000\017\000\065\000\035\000\066\000\036\000\
\037\000\038\000\039\000\040\000\041\000\062\000\000\000\002\000\
\000\000\018\000\000\000\019\000\003\000\000\000\021\000\032\000\
\033\000\034\000\035\000\000\000\036\000\037\000\038\000\039\000\
\040\000\041\000\004\000\000\000\005\000\000\000\006\000\000\000\
\000\000\007\000\000\000\000\000\008\000\000\000\000\000\064\000\
\020\000\000\000\000\000\000\000\000\000\032\000\033\000\034\000\
\035\000\022\000\036\000\037\000\038\000\039\000\040\000\041\000\
\036\000\037\000\038\000\039\000\040\000\041\000\032\000\033\000\
\034\000\035\000\045\000\036\000\037\000\038\000\039\000\040\000\
\041\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\
\044\000\000\000\047\000\000\000\014\000\032\000\033\000\034\000\
\035\000\000\000\036\000\037\000\038\000\039\000\040\000\041\000\
\000\000\000\000\008\000\032\000\033\000\034\000\035\000\000\000\
\036\000\037\000\038\000\039\000\040\000\041\000\013\000\037\000\
\038\000\039\000\040\000\041\000\000\000\034\000\035\000\012\000\
\036\000\037\000\038\000\039\000\040\000\041\000\000\000\000\000\
\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\018\000\000\000\000\000\018\000\018\000\018\000\
\018\000\000\000\018\000\018\000\018\000\018\000\018\000\000\000\
\000\000\000\000\000\000\018\000\000\000\018\000\000\000\018\000\
\018\000\000\000\018\000\018\000\017\000\018\000\000\000\017\000\
\017\000\017\000\017\000\000\000\017\000\017\000\017\000\017\000\
\005\000\000\000\005\000\000\000\000\000\017\000\000\000\017\000\
\005\000\017\000\017\000\000\000\017\000\017\000\016\000\017\000\
\000\000\016\000\016\000\016\000\016\000\000\000\016\000\016\000\
\016\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\
\000\000\016\000\000\000\016\000\016\000\000\000\016\000\016\000\
\021\000\016\000\000\000\021\000\021\000\021\000\021\000\000\000\
\021\000\021\000\002\000\000\000\002\000\000\000\000\000\002\000\
\000\000\021\000\002\000\021\000\000\000\021\000\021\000\000\000\
\021\000\021\000\020\000\021\000\000\000\020\000\020\000\020\000\
\020\000\000\000\020\000\022\000\000\000\000\000\022\000\022\000\
\022\000\022\000\000\000\020\000\000\000\020\000\000\000\020\000\
\020\000\000\000\020\000\020\000\022\000\020\000\022\000\000\000\
\022\000\022\000\000\000\022\000\022\000\015\000\022\000\000\000\
\015\000\015\000\015\000\015\000\000\000\000\000\014\000\000\000\
\000\000\014\000\014\000\014\000\000\000\000\000\015\000\000\000\
\015\000\000\000\015\000\015\000\000\000\015\000\015\000\014\000\
\015\000\014\000\000\000\014\000\014\000\000\000\014\000\014\000\
\013\000\014\000\000\000\013\000\013\000\008\000\000\000\008\000\
\000\000\012\000\008\000\000\000\012\000\008\000\000\000\000\000\
\000\000\013\000\027\000\013\000\000\000\013\000\013\000\000\000\
\013\000\013\000\012\000\013\000\012\000\000\000\012\000\012\000\
\000\000\012\000\012\000\027\000\012\000\027\000\000\000\027\000\
\027\000\000\000\027\000\027\000\000\000\027\000"

let yycheck = "\001\000\
\000\000\006\000\007\000\021\001\001\000\042\000\011\000\012\000\
\045\000\027\001\015\000\006\001\007\001\008\001\019\000\010\001\
\011\001\012\001\013\001\014\001\015\001\000\000\012\001\013\001\
\014\001\015\001\000\000\032\000\033\000\034\000\035\000\036\000\
\037\000\038\000\039\000\040\000\041\000\013\001\014\001\015\001\
\032\001\046\000\044\000\001\001\004\001\003\001\004\001\014\001\
\015\001\000\000\004\001\009\001\000\000\019\001\015\001\030\001\
\021\001\027\001\016\001\017\001\062\000\008\001\064\000\010\001\
\011\001\012\001\013\001\014\001\015\001\024\001\255\255\000\000\
\255\255\031\001\255\255\033\001\004\001\255\255\000\000\005\001\
\006\001\007\001\008\001\255\255\010\001\011\001\012\001\013\001\
\014\001\015\001\018\001\255\255\020\001\255\255\022\001\255\255\
\255\255\025\001\255\255\255\255\028\001\255\255\255\255\029\001\
\000\000\255\255\255\255\255\255\255\255\005\001\006\001\007\001\
\008\001\000\000\010\001\011\001\012\001\013\001\014\001\015\001\
\010\001\011\001\012\001\013\001\014\001\015\001\005\001\006\001\
\007\001\008\001\026\001\010\001\011\001\012\001\013\001\014\001\
\015\001\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\023\001\255\255\002\001\255\255\000\000\005\001\006\001\007\001\
\008\001\255\255\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\255\255\000\000\005\001\006\001\007\001\008\001\255\255\
\010\001\011\001\012\001\013\001\014\001\015\001\000\000\011\001\
\012\001\013\001\014\001\015\001\255\255\007\001\008\001\000\000\
\010\001\011\001\012\001\013\001\014\001\015\001\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\255\255\255\255\005\001\006\001\007\001\
\008\001\255\255\010\001\011\001\012\001\013\001\014\001\255\255\
\255\255\255\255\255\255\019\001\255\255\021\001\255\255\023\001\
\024\001\255\255\026\001\027\001\002\001\029\001\255\255\005\001\
\006\001\007\001\008\001\255\255\010\001\011\001\012\001\013\001\
\019\001\255\255\021\001\255\255\255\255\019\001\255\255\021\001\
\027\001\023\001\024\001\255\255\026\001\027\001\002\001\029\001\
\255\255\005\001\006\001\007\001\008\001\255\255\010\001\011\001\
\012\001\255\255\255\255\255\255\255\255\255\255\255\255\019\001\
\255\255\021\001\255\255\023\001\024\001\255\255\026\001\027\001\
\002\001\029\001\255\255\005\001\006\001\007\001\008\001\255\255\
\010\001\011\001\019\001\255\255\021\001\255\255\255\255\024\001\
\255\255\019\001\027\001\021\001\255\255\023\001\024\001\255\255\
\026\001\027\001\002\001\029\001\255\255\005\001\006\001\007\001\
\008\001\255\255\010\001\002\001\255\255\255\255\005\001\006\001\
\007\001\008\001\255\255\019\001\255\255\021\001\255\255\023\001\
\024\001\255\255\026\001\027\001\019\001\029\001\021\001\255\255\
\023\001\024\001\255\255\026\001\027\001\002\001\029\001\255\255\
\005\001\006\001\007\001\008\001\255\255\255\255\002\001\255\255\
\255\255\005\001\006\001\007\001\255\255\255\255\019\001\255\255\
\021\001\255\255\023\001\024\001\255\255\026\001\027\001\019\001\
\029\001\021\001\255\255\023\001\024\001\255\255\026\001\027\001\
\002\001\029\001\255\255\005\001\006\001\019\001\255\255\021\001\
\255\255\002\001\024\001\255\255\005\001\027\001\255\255\255\255\
\255\255\019\001\002\001\021\001\255\255\023\001\024\001\255\255\
\026\001\027\001\019\001\029\001\021\001\255\255\023\001\024\001\
\255\255\026\001\027\001\019\001\029\001\021\001\255\255\023\001\
\024\001\255\255\026\001\027\001\255\255\029\001"

let yynames_const = "\
  LP\000\
  RP\000\
  ADD\000\
  SUB\000\
  MULT\000\
  DIV\000\
  NOT\000\
  EQUAL\000\
  NOTEQUAL\000\
  LOWER\000\
  GREATER\000\
  LOWEREQUAL\000\
  GREATEREQUAL\000\
  TRUE\000\
  FALSE\000\
  PRINT\000\
  SEMICOL\000\
  BEGIN\000\
  END\000\
  IF\000\
  THEN\000\
  ELSE\000\
  WHILE\000\
  DO\000\
  DONE\000\
  LET\000\
  IN\000\
  ASSIGN\000\
  EXCLAM\000\
  AFFECT\000\
  REF\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  STRING\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.inst) in
    Obj.repr(
# 34 "parser.mly"
                ( _1 )
# 305 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 36 "parser.mly"
                  ( Ast.Print(_2) )
# 312 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'bloc) in
    Obj.repr(
# 37 "parser.mly"
                     ( Ast.Bloc(_2) )
# 319 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Ast.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Ast.inst) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ast.inst) in
    Obj.repr(
# 38 "parser.mly"
                                  ( Ast.If(_2,_4,_6) )
# 328 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Ast.inst) in
    Obj.repr(
# 39 "parser.mly"
                        ( Ast.IfThen(_2,_4) )
# 336 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ast.inst) in
    Obj.repr(
# 40 "parser.mly"
                                     ( Ast.Let(_2,_4,_6) )
# 345 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Ast.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'bloc) in
    Obj.repr(
# 41 "parser.mly"
                              ( Ast.While(_2,_4) )
# 353 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 42 "parser.mly"
                         ( Ast.Affect (_1,_3) )
# 361 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.inst) in
    Obj.repr(
# 45 "parser.mly"
            ( [_1] )
# 368 "parser.ml"
               : 'bloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.inst) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bloc) in
    Obj.repr(
# 46 "parser.mly"
                        ( _1::_3 )
# 376 "parser.ml"
               : 'bloc))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.expr) in
    Obj.repr(
# 49 "parser.mly"
                  ( Ast.Par(_2) )
# 383 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 50 "parser.mly"
                     ( Ast.Add(_1,_3) )
# 391 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 51 "parser.mly"
                     ( Ast.Sub(_1,_3) )
# 399 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 52 "parser.mly"
                      ( Ast.Mult(_1,_3) )
# 407 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 53 "parser.mly"
                     ( Ast.Div(_1,_3) )
# 415 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 54 "parser.mly"
                       ( Ast.Lower(_1,_3) )
# 423 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 55 "parser.mly"
                         ( Ast.Greater(_1,_3) )
# 431 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 56 "parser.mly"
                            ( Ast.LowerEqual(_1,_3) )
# 439 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 57 "parser.mly"
                              ( Ast.GreaterEqual(_1,_3) )
# 447 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 58 "parser.mly"
                       ( Ast.Equal(_1,_3) )
# 455 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 59 "parser.mly"
                          ( Ast.NotEqual(_1,_3) )
# 463 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 60 "parser.mly"
                ( Ast.Not(_2) )
# 470 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 61 "parser.mly"
           ( Ast.Int(_1) )
# 477 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
            ( Ast.True )
# 483 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
             ( Ast.False )
# 489 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 64 "parser.mly"
              ( Ast.String(_1) )
# 496 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 65 "parser.mly"
                ( Ast.Ref(_2) )
# 503 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 66 "parser.mly"
                     ( Ast.Exclam(_2) )
# 510 "parser.ml"
               : Ast.expr))
(* Entry prog *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let prog (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.inst)
;;
