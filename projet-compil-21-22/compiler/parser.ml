type token =
  | INT of (int)
  | STRING of (string)
  | LP
  | RP
  | ADD
  | SUB
  | MULT
  | DIV
  | NOT
  | EQUAL
  | NOTEQUAL
  | LOWER
  | GREATER
  | LOWEREQUAL
  | GREATEREQUAL
  | TRUE
  | FALSE
  | PRINT
  | SEMICOL
  | BEGIN
  | END
  | IF
  | THEN
  | ELSE
  | WHILE
  | DO
  | DONE
  | LET
  | IN
  | ASSIGN
  | EXCLAM
  | AFFECT
  | REF
  | AND
  | WHERE
  | LA
  | RA
  | LC
  | RC
  | COMMA
  | LENGTH
  | CONS
  | HD
  | TL
  | EMPTY
  | NIL
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
# 54 "parser.ml"
let yytransl_const = [|
  259 (* LP *);
  260 (* RP *);
  261 (* ADD *);
  262 (* SUB *);
  263 (* MULT *);
  264 (* DIV *);
  265 (* NOT *);
  266 (* EQUAL *);
  267 (* NOTEQUAL *);
  268 (* LOWER *);
  269 (* GREATER *);
  270 (* LOWEREQUAL *);
  271 (* GREATEREQUAL *);
  272 (* TRUE *);
  273 (* FALSE *);
  274 (* PRINT *);
  275 (* SEMICOL *);
  276 (* BEGIN *);
  277 (* END *);
  278 (* IF *);
  279 (* THEN *);
  280 (* ELSE *);
  281 (* WHILE *);
  282 (* DO *);
  283 (* DONE *);
  284 (* LET *);
  285 (* IN *);
  286 (* ASSIGN *);
  287 (* EXCLAM *);
  288 (* AFFECT *);
  289 (* REF *);
  290 (* AND *);
  291 (* WHERE *);
  292 (* LA *);
  293 (* RA *);
  294 (* LC *);
  295 (* RC *);
  296 (* COMMA *);
  297 (* LENGTH *);
  298 (* CONS *);
  299 (* HD *);
  300 (* TL *);
  301 (* EMPTY *);
  302 (* NIL *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* STRING *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\004\000\004\000\005\000\005\000\007\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\008\000\008\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\000\000"

let yylen = "\002\000\
\002\000\002\000\003\000\006\000\004\000\004\000\005\000\003\000\
\003\000\006\000\001\000\003\000\001\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\001\000\001\000\001\000\002\000\
\002\000\003\000\004\000\002\000\003\000\002\000\002\000\002\000\
\001\000\001\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\002\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\046\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\
\044\000\045\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\033\000\000\000\021\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\
\000\000\000\000\000\000\000\000\000\000\025\000\024\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\003\000\000\000\000\000\000\000\000\000\000\000\009\000\
\000\000\000\000\016\000\036\000\000\000\026\000\000\000\000\000\
\000\000\000\000\020\000\000\000\000\000\000\000\000\000\000\000\
\000\000\012\000\000\000\000\000\000\000\000\000\014\000\000\000\
\027\000\035\000\000\000\007\000\000\000\000\000"

let yydgoto = "\002\000\
\009\000\033\000\030\000\031\000\036\000\029\000\037\000\049\000"

let yysindex = "\002\000\
\028\255\000\000\013\255\127\255\028\255\127\255\127\255\005\255\
\000\000\004\000\127\255\127\255\000\000\238\254\127\255\127\255\
\000\000\000\000\029\255\127\255\127\255\127\255\127\255\127\255\
\127\255\127\255\000\000\077\255\000\000\243\254\014\255\181\255\
\077\255\010\255\022\255\020\255\023\255\005\255\000\000\077\255\
\094\255\127\255\205\255\060\255\000\000\000\000\000\000\004\255\
\030\255\077\255\109\255\077\255\077\255\077\255\127\255\127\255\
\127\255\127\255\127\255\127\255\127\255\127\255\127\255\127\255\
\028\255\000\000\028\255\028\255\127\255\028\255\005\255\000\000\
\071\255\169\255\000\000\000\000\127\255\000\000\077\255\089\255\
\047\255\119\255\000\000\233\255\235\002\192\255\019\255\055\255\
\159\255\000\000\234\254\104\255\077\255\097\255\000\000\127\255\
\000\000\000\000\028\255\000\000\077\255\097\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\192\001\000\000\044\255\000\000\000\000\
\000\000\222\255\000\000\000\000\105\255\000\000\000\000\238\001\
\000\000\000\000\000\000\222\255\047\000\000\000\000\000\098\255\
\000\000\251\001\000\000\041\002\087\002\133\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\179\002\185\000\
\139\000\093\000\000\000\205\001\159\001\113\001\067\001\021\001\
\231\000\000\000\058\000\000\000\210\002\237\001\000\000\000\000\
\000\000\000\000\000\000\000\000\028\002\027\002"

let yygindex = "\000\000\
\000\000\017\000\255\255\196\255\066\000\131\000\103\000\071\000"

let yytablesize = 1018
let yytable = "\010\000\
\023\000\099\000\001\000\039\000\090\000\065\000\035\000\092\000\
\055\000\056\000\057\000\058\000\038\000\059\000\060\000\061\000\
\062\000\063\000\064\000\042\000\028\000\038\000\032\000\055\000\
\056\000\057\000\058\000\040\000\041\000\003\000\046\000\043\000\
\063\000\064\000\066\000\068\000\047\000\048\000\050\000\051\000\
\052\000\053\000\054\000\077\000\011\000\004\000\043\000\005\000\
\070\000\006\000\012\000\069\000\007\000\057\000\058\000\008\000\
\071\000\005\000\074\000\055\000\056\000\057\000\058\000\076\000\
\011\000\091\000\078\000\079\000\094\000\064\000\011\000\080\000\
\081\000\082\000\083\000\084\000\085\000\086\000\087\000\088\000\
\089\000\055\000\056\000\057\000\058\000\093\000\059\000\060\000\
\061\000\062\000\063\000\064\000\019\000\048\000\056\000\057\000\
\058\000\102\000\055\000\056\000\057\000\058\000\096\000\059\000\
\060\000\061\000\062\000\063\000\064\000\013\000\014\000\015\000\
\101\000\055\000\056\000\057\000\058\000\016\000\059\000\060\000\
\061\000\062\000\063\000\064\000\017\000\018\000\058\000\013\000\
\014\000\015\000\100\000\038\000\073\000\013\000\034\000\016\000\
\095\000\034\000\018\000\019\000\072\000\020\000\017\000\018\000\
\021\000\044\000\045\000\098\000\000\000\022\000\023\000\024\000\
\025\000\026\000\027\000\000\000\000\000\019\000\000\000\020\000\
\000\000\000\000\021\000\055\000\056\000\057\000\058\000\022\000\
\023\000\024\000\025\000\026\000\027\000\055\000\056\000\057\000\
\058\000\000\000\059\000\060\000\061\000\062\000\063\000\064\000\
\017\000\055\000\056\000\057\000\058\000\000\000\059\000\060\000\
\061\000\062\000\063\000\064\000\055\000\056\000\057\000\058\000\
\000\000\000\000\000\000\067\000\062\000\063\000\064\000\097\000\
\075\000\055\000\056\000\057\000\058\000\000\000\059\000\060\000\
\061\000\062\000\063\000\064\000\000\000\000\000\000\000\000\000\
\000\000\000\000\021\000\021\000\021\000\021\000\040\000\021\000\
\021\000\021\000\021\000\021\000\021\000\055\000\056\000\057\000\
\058\000\000\000\000\000\060\000\061\000\062\000\063\000\064\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\000\000\023\000\039\000\023\000\000\000\023\000\
\023\000\000\000\023\000\023\000\000\000\023\000\000\000\023\000\
\000\000\023\000\023\000\023\000\023\000\023\000\038\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\043\000\
\043\000\043\000\043\000\021\000\021\000\021\000\021\000\043\000\
\021\000\021\000\021\000\021\000\021\000\021\000\043\000\043\000\
\000\000\043\000\038\000\043\000\000\000\043\000\043\000\000\000\
\043\000\043\000\000\000\043\000\005\000\043\000\005\000\043\000\
\043\000\043\000\043\000\043\000\005\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\000\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\000\000\019\000\
\037\000\019\000\000\000\019\000\019\000\000\000\019\000\019\000\
\000\000\019\000\000\000\019\000\000\000\019\000\019\000\019\000\
\019\000\019\000\000\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\018\000\018\000\018\000\018\000\018\000\
\018\000\000\000\000\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\000\000\018\000\042\000\018\000\
\000\000\018\000\018\000\000\000\018\000\018\000\000\000\018\000\
\000\000\018\000\000\000\018\000\018\000\018\000\018\000\018\000\
\000\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\017\000\017\000\017\000\017\000\017\000\000\000\002\000\
\000\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\000\000\017\000\041\000\017\000\000\000\017\000\
\017\000\000\000\017\000\017\000\000\000\017\000\000\000\017\000\
\000\000\017\000\017\000\017\000\017\000\017\000\000\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\040\000\
\040\000\040\000\040\000\000\000\006\000\008\000\000\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\000\000\040\000\028\000\040\000\000\000\040\000\040\000\000\000\
\040\000\040\000\000\000\040\000\000\000\040\000\000\000\040\000\
\040\000\040\000\040\000\040\000\000\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\039\000\039\000\039\000\
\039\000\000\000\004\000\010\000\000\000\039\000\039\000\039\000\
\039\000\039\000\039\000\000\000\039\000\039\000\000\000\039\000\
\030\000\039\000\000\000\039\000\039\000\000\000\039\000\039\000\
\000\000\039\000\000\000\039\000\000\000\039\000\039\000\039\000\
\039\000\039\000\000\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\038\000\038\000\038\000\038\000\000\000\
\000\000\000\000\000\000\038\000\038\000\038\000\038\000\038\000\
\000\000\000\000\038\000\038\000\000\000\038\000\031\000\038\000\
\000\000\038\000\038\000\000\000\038\000\038\000\000\000\038\000\
\000\000\038\000\000\000\038\000\038\000\038\000\038\000\038\000\
\000\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\037\000\037\000\037\000\037\000\000\000\000\000\000\000\
\000\000\037\000\037\000\037\000\037\000\000\000\000\000\000\000\
\037\000\037\000\000\000\037\000\032\000\037\000\000\000\037\000\
\037\000\000\000\037\000\037\000\000\000\037\000\000\000\037\000\
\000\000\037\000\037\000\037\000\037\000\037\000\000\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\042\000\
\042\000\042\000\042\000\000\000\000\000\000\000\000\000\042\000\
\042\000\042\000\000\000\000\000\000\000\000\000\042\000\042\000\
\000\000\042\000\029\000\042\000\000\000\042\000\042\000\000\000\
\042\000\042\000\000\000\042\000\000\000\042\000\000\000\042\000\
\042\000\042\000\042\000\042\000\000\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\041\000\041\000\041\000\
\041\000\015\000\002\000\000\000\002\000\041\000\041\000\002\000\
\000\000\000\000\002\000\000\000\041\000\041\000\000\000\041\000\
\000\000\041\000\002\000\041\000\041\000\000\000\041\000\041\000\
\000\000\041\000\000\000\041\000\000\000\041\000\041\000\041\000\
\041\000\041\000\000\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\028\000\028\000\028\000\028\000\006\000\
\008\000\006\000\008\000\028\000\006\000\008\000\000\000\006\000\
\008\000\000\000\028\000\028\000\000\000\028\000\000\000\028\000\
\008\000\028\000\028\000\000\000\028\000\028\000\000\000\028\000\
\000\000\028\000\000\000\028\000\028\000\028\000\028\000\028\000\
\000\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\030\000\030\000\030\000\030\000\004\000\010\000\004\000\
\010\000\030\000\004\000\010\000\000\000\004\000\010\000\000\000\
\030\000\030\000\000\000\030\000\000\000\030\000\010\000\030\000\
\030\000\000\000\030\000\030\000\000\000\030\000\000\000\030\000\
\000\000\030\000\030\000\030\000\030\000\030\000\000\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\031\000\
\031\000\031\000\031\000\000\000\000\000\000\000\000\000\031\000\
\000\000\000\000\000\000\000\000\000\000\000\000\031\000\031\000\
\000\000\031\000\000\000\031\000\000\000\031\000\031\000\000\000\
\031\000\031\000\000\000\031\000\000\000\031\000\000\000\031\000\
\031\000\031\000\031\000\031\000\000\000\031\000\031\000\031\000\
\031\000\031\000\031\000\031\000\031\000\032\000\032\000\032\000\
\032\000\000\000\000\000\000\000\000\000\032\000\000\000\000\000\
\000\000\000\000\000\000\000\000\032\000\032\000\000\000\032\000\
\000\000\032\000\000\000\032\000\032\000\000\000\032\000\032\000\
\000\000\032\000\000\000\032\000\000\000\032\000\032\000\032\000\
\032\000\032\000\000\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\029\000\029\000\029\000\029\000\000\000\
\000\000\000\000\000\000\029\000\000\000\000\000\000\000\000\000\
\000\000\000\000\029\000\029\000\000\000\029\000\000\000\029\000\
\000\000\029\000\029\000\000\000\029\000\029\000\000\000\029\000\
\000\000\029\000\000\000\029\000\029\000\029\000\029\000\029\000\
\000\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\000\000\000\000\000\000\015\000\000\000\015\000\000\000\
\000\000\015\000\000\000\000\000\015\000\000\000\015\000\055\000\
\056\000\057\000\058\000\015\000\015\000\000\000\061\000\062\000\
\063\000\064\000"

let yycheck = "\001\000\
\000\000\024\001\001\000\000\000\065\000\019\001\002\001\068\000\
\005\001\006\001\007\001\008\001\035\001\010\001\011\001\012\001\
\013\001\014\001\015\001\038\001\004\000\035\001\006\000\005\001\
\006\001\007\001\008\001\011\000\012\000\002\001\002\001\015\000\
\014\001\015\001\021\001\026\001\020\000\021\000\022\000\023\000\
\024\000\025\000\026\000\040\001\032\001\018\001\000\000\020\001\
\029\001\022\001\038\001\030\001\025\001\007\001\008\001\028\001\
\034\001\000\000\042\000\005\001\006\001\007\001\008\001\004\001\
\021\001\067\000\037\001\051\000\070\000\015\001\027\001\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\005\001\006\001\007\001\008\001\069\000\010\001\011\001\
\012\001\013\001\014\001\015\001\000\000\077\000\006\001\007\001\
\008\001\099\000\005\001\006\001\007\001\008\001\032\001\010\001\
\011\001\012\001\013\001\014\001\015\001\001\001\002\001\003\001\
\096\000\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\008\001\001\001\
\002\001\003\001\027\001\035\001\039\001\029\001\037\001\009\001\
\071\000\007\000\000\000\031\001\038\000\033\001\016\001\017\001\
\036\001\015\000\016\000\077\000\255\255\041\001\042\001\043\001\
\044\001\045\001\046\001\255\255\255\255\031\001\255\255\033\001\
\255\255\255\255\036\001\005\001\006\001\007\001\008\001\041\001\
\042\001\043\001\044\001\045\001\046\001\005\001\006\001\007\001\
\008\001\255\255\010\001\011\001\012\001\013\001\014\001\015\001\
\000\000\005\001\006\001\007\001\008\001\255\255\010\001\011\001\
\012\001\013\001\014\001\015\001\005\001\006\001\007\001\008\001\
\255\255\255\255\255\255\023\001\013\001\014\001\015\001\039\001\
\004\001\005\001\006\001\007\001\008\001\255\255\010\001\011\001\
\012\001\013\001\014\001\015\001\255\255\255\255\255\255\255\255\
\255\255\255\255\005\001\006\001\007\001\008\001\000\000\010\001\
\011\001\012\001\013\001\014\001\015\001\005\001\006\001\007\001\
\008\001\255\255\255\255\011\001\012\001\013\001\014\001\015\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\000\000\021\001\255\255\023\001\
\024\001\255\255\026\001\027\001\255\255\029\001\255\255\031\001\
\255\255\033\001\034\001\035\001\036\001\037\001\035\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\000\000\021\001\255\255\023\001\024\001\255\255\
\026\001\027\001\255\255\029\001\019\001\031\001\021\001\033\001\
\034\001\035\001\036\001\037\001\027\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\255\255\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\000\000\021\001\255\255\023\001\024\001\255\255\026\001\027\001\
\255\255\029\001\255\255\031\001\255\255\033\001\034\001\035\001\
\036\001\037\001\255\255\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\001\001\002\001\003\001\004\001\005\001\
\006\001\255\255\255\255\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\000\000\021\001\
\255\255\023\001\024\001\255\255\026\001\027\001\255\255\029\001\
\255\255\031\001\255\255\033\001\034\001\035\001\036\001\037\001\
\255\255\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\001\001\002\001\003\001\004\001\005\001\255\255\000\000\
\255\255\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\000\000\021\001\255\255\023\001\
\024\001\255\255\026\001\027\001\255\255\029\001\255\255\031\001\
\255\255\033\001\034\001\035\001\036\001\037\001\255\255\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\001\001\
\002\001\003\001\004\001\255\255\000\000\000\000\255\255\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\000\000\021\001\255\255\023\001\024\001\255\255\
\026\001\027\001\255\255\029\001\255\255\031\001\255\255\033\001\
\034\001\035\001\036\001\037\001\255\255\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\001\001\002\001\003\001\
\004\001\255\255\000\000\000\000\255\255\009\001\010\001\011\001\
\012\001\013\001\014\001\255\255\016\001\017\001\255\255\019\001\
\000\000\021\001\255\255\023\001\024\001\255\255\026\001\027\001\
\255\255\029\001\255\255\031\001\255\255\033\001\034\001\035\001\
\036\001\037\001\255\255\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\001\001\002\001\003\001\004\001\255\255\
\255\255\255\255\255\255\009\001\010\001\011\001\012\001\013\001\
\255\255\255\255\016\001\017\001\255\255\019\001\000\000\021\001\
\255\255\023\001\024\001\255\255\026\001\027\001\255\255\029\001\
\255\255\031\001\255\255\033\001\034\001\035\001\036\001\037\001\
\255\255\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\001\001\002\001\003\001\004\001\255\255\255\255\255\255\
\255\255\009\001\010\001\011\001\012\001\255\255\255\255\255\255\
\016\001\017\001\255\255\019\001\000\000\021\001\255\255\023\001\
\024\001\255\255\026\001\027\001\255\255\029\001\255\255\031\001\
\255\255\033\001\034\001\035\001\036\001\037\001\255\255\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\001\001\
\002\001\003\001\004\001\255\255\255\255\255\255\255\255\009\001\
\010\001\011\001\255\255\255\255\255\255\255\255\016\001\017\001\
\255\255\019\001\000\000\021\001\255\255\023\001\024\001\255\255\
\026\001\027\001\255\255\029\001\255\255\031\001\255\255\033\001\
\034\001\035\001\036\001\037\001\255\255\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\001\001\002\001\003\001\
\004\001\000\000\019\001\255\255\021\001\009\001\010\001\024\001\
\255\255\255\255\027\001\255\255\016\001\017\001\255\255\019\001\
\255\255\021\001\035\001\023\001\024\001\255\255\026\001\027\001\
\255\255\029\001\255\255\031\001\255\255\033\001\034\001\035\001\
\036\001\037\001\255\255\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\001\001\002\001\003\001\004\001\019\001\
\019\001\021\001\021\001\009\001\024\001\024\001\255\255\027\001\
\027\001\255\255\016\001\017\001\255\255\019\001\255\255\021\001\
\035\001\023\001\024\001\255\255\026\001\027\001\255\255\029\001\
\255\255\031\001\255\255\033\001\034\001\035\001\036\001\037\001\
\255\255\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\001\001\002\001\003\001\004\001\019\001\019\001\021\001\
\021\001\009\001\024\001\024\001\255\255\027\001\027\001\255\255\
\016\001\017\001\255\255\019\001\255\255\021\001\035\001\023\001\
\024\001\255\255\026\001\027\001\255\255\029\001\255\255\031\001\
\255\255\033\001\034\001\035\001\036\001\037\001\255\255\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\001\001\
\002\001\003\001\004\001\255\255\255\255\255\255\255\255\009\001\
\255\255\255\255\255\255\255\255\255\255\255\255\016\001\017\001\
\255\255\019\001\255\255\021\001\255\255\023\001\024\001\255\255\
\026\001\027\001\255\255\029\001\255\255\031\001\255\255\033\001\
\034\001\035\001\036\001\037\001\255\255\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\001\001\002\001\003\001\
\004\001\255\255\255\255\255\255\255\255\009\001\255\255\255\255\
\255\255\255\255\255\255\255\255\016\001\017\001\255\255\019\001\
\255\255\021\001\255\255\023\001\024\001\255\255\026\001\027\001\
\255\255\029\001\255\255\031\001\255\255\033\001\034\001\035\001\
\036\001\037\001\255\255\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\001\001\002\001\003\001\004\001\255\255\
\255\255\255\255\255\255\009\001\255\255\255\255\255\255\255\255\
\255\255\255\255\016\001\017\001\255\255\019\001\255\255\021\001\
\255\255\023\001\024\001\255\255\026\001\027\001\255\255\029\001\
\255\255\031\001\255\255\033\001\034\001\035\001\036\001\037\001\
\255\255\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\255\255\255\255\255\255\019\001\255\255\021\001\255\255\
\255\255\024\001\255\255\255\255\027\001\255\255\029\001\005\001\
\006\001\007\001\008\001\034\001\035\001\255\255\012\001\013\001\
\014\001\015\001"

let yynames_const = "\
  LP\000\
  RP\000\
  ADD\000\
  SUB\000\
  MULT\000\
  DIV\000\
  NOT\000\
  EQUAL\000\
  NOTEQUAL\000\
  LOWER\000\
  GREATER\000\
  LOWEREQUAL\000\
  GREATEREQUAL\000\
  TRUE\000\
  FALSE\000\
  PRINT\000\
  SEMICOL\000\
  BEGIN\000\
  END\000\
  IF\000\
  THEN\000\
  ELSE\000\
  WHILE\000\
  DO\000\
  DONE\000\
  LET\000\
  IN\000\
  ASSIGN\000\
  EXCLAM\000\
  AFFECT\000\
  REF\000\
  AND\000\
  WHERE\000\
  LA\000\
  RA\000\
  LC\000\
  RC\000\
  COMMA\000\
  LENGTH\000\
  CONS\000\
  HD\000\
  TL\000\
  EMPTY\000\
  NIL\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  STRING\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.inst) in
    Obj.repr(
# 52 "parser.mly"
                ( _1 )
# 496 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 54 "parser.mly"
                  ( Ast.Print(_2) )
# 503 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'bloc) in
    Obj.repr(
# 55 "parser.mly"
                     ( Ast.Bloc(_2) )
# 510 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Ast.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Ast.inst) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ast.inst) in
    Obj.repr(
# 56 "parser.mly"
                                  ( Ast.If(_2,_4,_6) )
# 519 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Ast.inst) in
    Obj.repr(
# 57 "parser.mly"
                        ( Ast.IfThen(_2,_4) )
# 527 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'et) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Ast.inst) in
    Obj.repr(
# 58 "parser.mly"
                    ( Ast.LetAnd(_2,_4) )
# 535 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'cond) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'bloc) in
    Obj.repr(
# 59 "parser.mly"
                              ( Ast.While(_2,_4) )
# 543 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 60 "parser.mly"
                         ( Ast.Affect (_1,_3) )
# 551 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.inst) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'affect) in
    Obj.repr(
# 61 "parser.mly"
                        ( Ast.Where(_1,_3) )
# 559 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Ast.expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 62 "parser.mly"
                                    ( Ast.TabAffect(_1,_3,_6) )
# 568 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.inst) in
    Obj.repr(
# 65 "parser.mly"
            ( [_1] )
# 575 "parser.ml"
               : 'bloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.inst) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bloc) in
    Obj.repr(
# 66 "parser.mly"
                        ( _1::_3 )
# 583 "parser.ml"
               : 'bloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'affect) in
    Obj.repr(
# 69 "parser.mly"
            ( [_1] )
# 590 "parser.ml"
               : 'et))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'affect) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'et) in
    Obj.repr(
# 70 "parser.mly"
                    ( _1::_3 )
# 598 "parser.ml"
               : 'et))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 72 "parser.mly"
                            ( (_1,_3) )
# 606 "parser.ml"
               : 'affect))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.expr) in
    Obj.repr(
# 74 "parser.mly"
                  ( Ast.Par(_2) )
# 613 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 75 "parser.mly"
                     ( Ast.Add(_1,_3) )
# 621 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 76 "parser.mly"
                     ( Ast.Sub(_1,_3) )
# 629 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 77 "parser.mly"
                      ( Ast.Mult(_1,_3) )
# 637 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 78 "parser.mly"
                     ( Ast.Div(_1,_3) )
# 645 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cond) in
    Obj.repr(
# 79 "parser.mly"
            ( Ast.Cond(_1) )
# 652 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 80 "parser.mly"
           ( Ast.Int(_1) )
# 659 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 81 "parser.mly"
              ( Ast.String(_1) )
# 666 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 82 "parser.mly"
                ( Ast.Ref(_2) )
# 673 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 83 "parser.mly"
                     ( Ast.Exclam(_2) )
# 680 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'seq) in
    Obj.repr(
# 84 "parser.mly"
                 ( Ast.Tab(_2) )
# 687 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Ast.expr) in
    Obj.repr(
# 85 "parser.mly"
                         ( Ast.TabGet(_1,_3) )
# 695 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 86 "parser.mly"
                   ( Ast.Length(_2) )
# 702 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 87 "parser.mly"
                      ( Ast.Cons(_2,_3) )
# 710 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 88 "parser.mly"
               ( Ast.Hd(_2) )
# 717 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 89 "parser.mly"
               ( Ast.Tl(_2) )
# 724 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 90 "parser.mly"
                  ( Ast.Empty(_2) )
# 731 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "parser.mly"
           ( Ast.Nil )
# 737 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 94 "parser.mly"
           ( [_1] )
# 744 "parser.ml"
               : 'seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'seq) in
    Obj.repr(
# 95 "parser.mly"
                     ( _1::_3 )
# 752 "parser.ml"
               : 'seq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'cond) in
    Obj.repr(
# 98 "parser.mly"
                  ( Ast.Par(_2) )
# 759 "parser.ml"
               : 'cond))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 99 "parser.mly"
                       ( Ast.Lower(_1,_3) )
# 767 "parser.ml"
               : 'cond))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 100 "parser.mly"
                         ( Ast.Greater(_1,_3) )
# 775 "parser.ml"
               : 'cond))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 101 "parser.mly"
                            ( Ast.LowerEqual(_1,_3) )
# 783 "parser.ml"
               : 'cond))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 102 "parser.mly"
                              ( Ast.GreaterEqual(_1,_3) )
# 791 "parser.ml"
               : 'cond))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 103 "parser.mly"
                       ( Ast.Equal(_1,_3) )
# 799 "parser.ml"
               : 'cond))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 104 "parser.mly"
                          ( Ast.NotEqual(_1,_3) )
# 807 "parser.ml"
               : 'cond))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cond) in
    Obj.repr(
# 105 "parser.mly"
                ( Ast.Not(_2) )
# 814 "parser.ml"
               : 'cond))
; (fun __caml_parser_env ->
    Obj.repr(
# 106 "parser.mly"
            ( Ast.True )
# 820 "parser.ml"
               : 'cond))
; (fun __caml_parser_env ->
    Obj.repr(
# 107 "parser.mly"
             ( Ast.False )
# 826 "parser.ml"
               : 'cond))
(* Entry prog *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let prog (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.inst)
;;
